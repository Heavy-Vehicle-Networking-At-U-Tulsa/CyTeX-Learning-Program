import random

#install matplotlib using pip
from mpl_toolkits.mplot3d import Axes3D
import matplotlib.pyplot as plt
import numpy as np

'''
Tulsa CyTeX, 2018

This code implements two different Random Number Generators (RNG).
RANDU - https://en.wikipedia.org/wiki/RANDU
Python Random Class - https://docs.python.org/2/library/random.html

Plots random numbers as 3-d points where x,y,z are random numbers

'''

#Finds the first number for use in RANDU algorithm, generated by a random seed
def randu_init():
    #find a random seed between 1 and 2^31
    seed = random.randint(1,2147483648)
    return seed


#RANDU algorithm
#Takes previous generated number and finds next number
#Follows equation Vj+1 = (65539*vj) Remainder 2^31, where random number is xj = vj / 2^31
#Returns both the vj needed for the next random and xj, the random number
def randu(num):

    new_num = (65539*num) % 2147483648
    random_num = new_num/2147483648
    return random_num,new_num

if __name__ == "__main__":

    plotted_point = []

    #initilizes RANDU numbers
    seed = randu_init()
    num_random,num_next = randu(seed)

    #Initilizes Plots
    fig = plt.figure()
    ax0 = fig.add_subplot(121, projection='3d')
    ax1 = fig.add_subplot(122, projection='3d')
    #Titles the plot
    ax0.set_title("RANDU")
    ax1.set_title("PY_RANDOM")

   #loop to plot multiple points
    for i in range(0,10):

        #finds 3 consecutive RANDU random numbers
        for j in range(0,3):
            plotted_point.insert(j,num_random)
            num_random, num_next = randu(num_next)

        #plots one random point of each algorithm
        ax0.scatter(plotted_point[0], plotted_point[1], plotted_point[2], s = 150, color = 'blue')
        ax1.scatter(random.random(),random.random(),random.random(), s = 150, color = 'blue')

    #sets the viewing angle of plot
    ax0.view_init(30,-128)
    ax1.view_init(30,-128)

    #displays the plot
    plt.show()

'''

***Run and look at plots. Modify this code to plot a large number of values. (I recommend 10000)
    -The matplotlib isn't optimized for speed and with larger numbers the program will take longer to run 
    -It may help to change the size of each point on the graph. Look for where you can decrease this.
    Consider the following.***

    Originally, do these numbers appear random?
    What about when you increase the number of points?
    What do you notice about the two algorithms? How would you rate them now?
    Think about why the results happen based on the mathematical operation. 
    Why may one of the algorithms not be good for computer security?
    Play with the viewing angle. Does python's random class look different at other angles?

'''