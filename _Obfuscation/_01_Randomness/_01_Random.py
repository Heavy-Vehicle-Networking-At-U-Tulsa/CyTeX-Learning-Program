import random

'''
Tulsa CyTeX, 2018

This code implements two different Random Number Generators (RNG).
RANDU - https://en.wikipedia.org/wiki/RANDU
Python Random Class - https://docs.python.org/2/library/random.html

Produces a random number, between 0 and 1, using both algorithms
'''

#Finds the first number for use in RANDU algorithm, generated by a random seed
def randu_init():
    #find a random seed between 1 and 2^31
    seed = random.randint(1,2147483648)
    return seed


#RANDU algorithm
#Takes previous generated number and finds next number
#Follows equation Vj+1 = (65539*vj) Remainder 2^31, where random number is xj = vj / 2^31
#Returns both the vj needed for the next random and xj, the random number
def randu(num):

    new_num = (65539*num) % 2147483648
    random_num = new_num/2147483648
    return random_num,new_num


if __name__ == "__main__":

    #initilize randu seed
    randu_seed = randu_init()

    #returns random number between 0 and 1 and seed for next random number
    randu_random , ranud_seed = randu(randu_seed)
    print("A random number using RANDU: ", randu_random)

    #generates random number between 0 and 1
    py_random = random.random()
    print("A random number using Python's Random class: ", py_random)

'''
***Modify this code to produce 10 or so numbers from each algorithm. 
    Observe the numbers and consider the following***

    Do these numbers appear random?
    If so, are these RNGs the same? How would you computationally compare the two? 

***Look at randu() and randu_init(). ***

    How is this generating a random number?
    If one was trying to predict this random number, what value would they need to know?
    Do you think this algorithm would produce random numbers after 2^31 times? Why or why not?


'''